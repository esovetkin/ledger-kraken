#!/usr/bin/env python3

# This is part of kraken-tools
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys

from configparser import ConfigParser

from argparse import ArgumentParser

from kraken import Kraken, KrakenData

from functions import depth_format

from multiprocessing import Pool

def _getconfig(conff='~/.krak/conf'):
    """
    Set the configuration. If it specify in configuration file, then
    override the default values.

    Keyword arguments :
    conff -- configuration file location
    """

    # the configuration with its default values
    conf = { 'personal': {
                'key' : "~/.krak/mykey.key" 
                },
             'logger': {
                 'db' : '~/.krak/data.db'
             },
             'ledger' : {
                 'filename_ledger' : "~/.krak/ledger_kraken.log",
                 'filename_timestamp' : "~/.krak/timestamp",
                 'account_fee' : "Expenses:Taxes:Kraken",
                 'account':"Assets:Kraken"
                 },
             'query' : {
                'timeout' : 5
             }
           }
    
    #read from configuration file
    config = ConfigParser()
    config.read(conff)

    #replace with the ones set in configuration file
    for section in config.sections():
        for keys,val in config[section].items():
            conf[section][keys] = val

    return conf


def _depth(args):
    """
    Print order book for the corresponding pair. 
    Public query, does not require key

    Keyword arguments : 

    args.pair -- pair name
    args.n -- number of entry displayed
    """

    k = Kraken()

    arg = dict()

    arg['pair'] = args.p
    arg['count'] = args.n

    depth = k.query_public('Depth',arg)

    try:
        print(depth_format(depth['result'],arg['pair']))
    except:
        print(depth['error'])


def _logger(args):
    """
    Fork a process to a background. 
    Continuously record depth and trades.

    Keyword arguments:

    :args.db:  location of the database
    :args.key: location of the database
    """

    def f(what):
        if (what == "depth"):
            try:
                k.sync_OrderBook()
            except Exception as e:
                print("exception during depth sync",e)        
                return 0

        if (what == "trades"):
            try:
                k.sync_RecentTrades()
            except Exception as e:
                print("exception during trades sync",e)            
                return 0

        return what
    
    k = KrakenData(db_path=args.db, key_path=args.key)

    # while (True):
    #     pool = Pool(processes = 2)

    #     pool.map(f, ["depth","trades"])

    #     pool.close()
    #     pool.terminate()
    #     pool.join()

    

def _orders():
    """
    Print orders : active, closed, all
    """
    k.load_key('keys/cica.key')

    k = Kraken()

    orders = k.query_private('OpenOrders')

    orders = orders['result']['open']

    t = [{'pair':orders[key]['descr']['pair'],\
          'type':orders[key]['descr']['type'],\
          'price':orders[key]['descr']['price'],\
          'vol':orders[key]['vol'],\
          'key':key,\
          'status':orders[key]['status']} for key in orders.keys()]






if __name__ == '__main__':
    """
    Kraken tools
    """
    # configuration
    conf = _getconfig()

    # top level parser
    parser = ArgumentParser(prog='krak',description='Tool for Kraken stuff')
    subparsers = parser.add_subparsers(help='sub-commands of krak')

    # parsers for subcommands and its options

    # depth
    p_depth = subparsers.add_parser('depth', help='Print order book')
    p_depth.add_argument('-p', default='XXBTZEUR', type=str, help='Currency pair')
    p_depth.add_argument('-n', default=30, type=int, help='Number of entry displayed')
    p_depth.set_defaults(func=_depth)

    # order
    p_order = subparsers.add_parser('order', help='Print order')

    # logger
    p_logger = subparsers.add_parser('logger',
                                     help='Continuously log depth and trades in background')
    p_logger.add_argument('--db',
                          default=conf['logger']['db'],
                          type=str,
                          help='Location of the database')
    p_logger.add_argument('--key',
                          default=conf['personal']['key'],
                          type=str,
                          help='Location of the key to use')
    p_logger.set_defaults(func=_logger)
    
    args = parser.parse_args()

    try :
        args.func(args)
    except : 
        parser.print_help()
        sys.exit(0)
